# In v1 configuration, type and id are @ prefix parameters.
# @type and @id are recommended. type and id are still available for backward compatibility

# HTTP input
# http://localhost:8888/<tag>?json=<json>
<source>
  @type http
  @id http_input
  @log_level debug

  port 8888
</source>

## match fluent's internal events
#<match fluent.**>
#  @type null
#</match>

#Add to all tag metrics the collectd plugin name

<match ovirt_collectd>
  @type rewrite_tag_filter
  rewriterule1 plugin ^(\w+\S+) plugin.${tag}.$1
</match>

#Statsd Plugin
 
<match plugin.ovirt_collectd.statsd>
  @type rewrite_tag_filter
  rewriterule1 type_instance ^(\w+\S+) statsd.${tag}.$1
</match>

<filter statsd.plugin.ovirt_collectd.statsd.vms.*.{nic,disk}.**>
  @type record_transformer
  enable_ruby
  <record>
    plugin_instance ${type_instance.split(".")[1]}
    type ${type_instance.split(".")[2]}_${type_instance.split(".")[4]}
    type_instance ${type_instance.split(".")[3]}
  </record>
</filter>

<filter statsd.plugin.ovirt_collectd.statsd.vms.*.{balloon,cpu}.**>
  @type record_transformer
  enable_ruby
  <record>
    plugin_instance ${type_instance.split(".")[1]}
    type ${type_instance.split(".")[2]}_${type_instance.split(".")[3]}
  </record>
    remove_keys type_instance
</filter>

<filter statsd.plugin.ovirt_collectd.statsd.hosts.memory.**>
  @type record_transformer
  enable_ruby
  <record>
    type ${type_instance.split(".")[1]}
    type_instance ${type_instance.split(".")[2]}
  </record>
</filter>

<filter statsd.plugin.ovirt_collectd.statsd.hosts.{cpu,swap,vms,storage,vdsm}.**>
  @type record_transformer
  enable_ruby
  <record>
    type ${type_instance.split(".")[1]}
    type_instance ${type_instance.split(".")[2]}
  </record>
</filter>

<filter statsd.plugin.ovirt_collectd.statsd.hosts.elapsed_time>
  @type record_transformer
  enable_ruby
  <record>
    type ${type_instance.split(".")[1]}
  </record>
</filter>

<filter statsd.plugin.ovirt_collectd.statsd.hosts.{nic,disk}.**>
  @type record_transformer
  enable_ruby
  <record>
    type ${type_instance.split(".")[1]}_${type_instance.split(".")[3]}
    type_instance ${type_instance.split(".")[2]}
  </record>
</filter>

<filter statsd.plugin.ovirt_collectd.statsd.**>
  @type record_transformer
  enable_ruby
  <record>
    entity ${type_instance.split(".")[0]}
    ${record["plugin"]} {"${type}": {"${dsnames[0]}":"${values[0]}"}}
    tag ${tag_parts[2]}
    host_id {{ ovirt_vds_vds_id }}
    hostname "#{Socket.gethostname}"
  </record>
    remove_keys host,values
</filter>

<filter plugin.ovirt_collectd.**>
  @type record_transformer
  enable_ruby
  <record>
    max_index ${values.length}
  </record>
</filter>

<match plugin.ovirt_collectd.**>
  @type rewrite_tag_filter
  rewriterule1 max_index ^(1|2|3)$ idx.${tag}.$1
</match>

<filter idx.plugin.ovirt_collectd.*.1>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
    ${record["plugin"]} {"${type}": {"${dsnames[0]}":"${values[0]}"}}
  </record>
</filter>

<filter idx.plugin.ovirt_collectd.*.2>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
    ${record["plugin"]} {"${type}":{"${dsnames[0]}":"${values[0]}","${dsnames[1]}":"${values[1]}"}}
  </record>
</filter>

<filter idx.plugin.ovirt_collectd.*.3>
  @type record_transformer
  enable_ruby
  auto_typecast true
  <record>
    ${record["plugin"]} {"${type}":{"${dsnames[0]}":"${values[0]}","${dsnames[1]}":"${values[1]}","${dsnames[2]}":"${values[2]}"}}
  </record>
</filter>

<filter idx.plugin.ovirt_collectd.virt**>
  @type record_transformer
  <record>
    host_id {{ ovirt_vds_vds_id }}
    tag ${tag_parts[2]}
    hostname "#{Socket.gethostname}"
    entity vms
  </record>
  remove_keys host,max_index,values
</filter>

<filter idx.plugin.ovirt_collectd.{cpu,load,interface,aggregation,swap,memory,nfs,df,entropy,disk,processes}.{1,2,3}>
  @type record_transformer
  enable_ruby
  <record>
    host_id {{ ovirt_vds_vds_id }}
    tag ${tag_parts[2]}
    hostname "#{Socket.gethostname}"
    entity hosts
  </record>
  remove_keys host,max_index,values
</filter>

#match fluent's internal events
#<match fluent.**>
#  @type stdout
#</match>

#Forward Plugin
<match **>
  @type forward
  heartbeat_type tcp
  flush_interval 1s
  <server>
    name <metrics server name or IP>
    host <metrics server name or IP>
    port <metrics server port>
  </server>
</match>
